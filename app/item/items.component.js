"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var item_service_1 = require("../services/item.service");
var router_1 = require("@angular/router");
// import { MapboxViewApi, Viewport as MapboxViewport } from "nativescript-mapbox";
var nativescript_angular_1 = require("nativescript-angular");
var observable_array_1 = require("data/observable-array");
var auth_service_1 = require("../services/auth.service");
var order_service_1 = require("../services/order.service");
var firebase = require("nativescript-plugin-firebase");
//trying location
var nativescript_geolocation_1 = require("nativescript-geolocation");
var color_1 = require("tns-core-modules/color");
// var Vibrate = require("nativescript-vibrate").Vibrate;
// let vibrator = new Vibrate();
var ItemsComponent = /** @class */ (function () {
    function ItemsComponent(itemService, router, routerextensions, auth, orderservice) {
        this.itemService = itemService;
        this.router = router;
        this.routerextensions = routerextensions;
        this.auth = auth;
        this.orderservice = orderservice;
        this.items = [];
        this.myItems = [];
        this.orderList = [];
        this._orderList = new observable_array_1.ObservableArray([]);
        this._items = new observable_array_1.ObservableArray([]);
        this.orderComplexLocal = [];
        this.orderComplexLocalFilter = [];
        this.orderDisplay = { "key": "", "uid": "", "status": "", "order": null,
            "cafeOwner": "", "location": "", "orderNo2": "", "imgSrc": "", "total": "" };
        this._order = new observable_array_1.ObservableArray([]);
        this.frequentCafes = [];
        this.startLocation = new nativescript_geolocation_1.Location();
        this.username = "";
        this.tabSelectedIndex = 0;
    }
    ItemsComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.items != []) {
            this.itemService.load()
                .subscribe(function (items) {
                _this._items = new observable_array_1.ObservableArray(items);
                _this.items = [];
                _this._items.forEach(function (x) {
                    _this.items.push(x);
                });
                _this.myItems.length = 0;
                _this.filterByLocation();
            });
        }
        else {
            console.log("not loading again");
        }
        //order load for your picks
        firebase.getCurrentUser()
            .then(function (token) {
            console.log(token);
            _this.orderservice.loadOrder(token.uid)
                .subscribe(function (orderlist) {
                _this.orderComplexLocal = [];
                _this._orderList = new observable_array_1.ObservableArray(orderlist);
                _this.orderList = [];
                _this._orderList.forEach(function (x) {
                    _this.orderList.push(x);
                });
                _this.orderList.forEach(function (x) {
                    //get Cafe details
                    _this.orderservice.getOrderDetails(x.cafe, x.orderNo)
                        .then(function (result) {
                        _this.orderDisplay.cafeOwner = _this.itemService.getCafeInfo(x.cafe).name;
                        _this.orderDisplay.imgSrc = _this.itemService.getCafeInfo(x.cafe).imgSrc;
                        _this.orderDisplay.key = result.value.key;
                        _this.orderDisplay.uid = result.value.uid;
                        _this.orderDisplay.status = result.value.status;
                        _this.orderDisplay.orderNo2 = result.value.orderNo2;
                        _this.orderDisplay.order = result.value.order;
                        _this.orderDisplay.total = _this.totalPrice(_this.orderDisplay.order);
                        _this.orderComplexLocal.push(_this.orderDisplay);
                        _this.onTapCurrentOrder();
                        _this.orderDisplay = { "key": "", "uid": "", "status": "", "order": null,
                            "cafeOwner": "", "location": "", "orderNo2": "", "imgSrc": "", "total": "" };
                    });
                });
            });
            _this.ontapListofFrequent(token.uid);
        });
    };
    //Frequently visited - to be completed ....
    ItemsComponent.prototype.ontapListofFrequent = function (token) {
        var _this = this;
        var counts;
        this.orderservice.frequentCafe(token)
            .then(function (res) {
            Object.keys(res.value).forEach(function (x) {
                _this.frequentCafes.push(res.value[x].cafe);
            });
        })
            .catch();
    };
    //Navitage to next screen
    ItemsComponent.prototype.jumptoMenu = function (cafeId, args) {
        var page = args.object;
        var view = page.getViewById("cafename");
        view.backgroundColor = new color_1.Color("#f0f0f0");
        view.animate({ backgroundColor: new color_1.Color("white"), duration: 200 });
        this.routerextensions.navigate(["/cafe", cafeId]);
    };
    //
    // //TabView controls
    ItemsComponent.prototype.changeTab = function () {
        if (this.tabSelectedIndex === 0) {
            this.tabSelectedIndex = 1;
        }
        else if (this.tabSelectedIndex === 1) {
            this.tabSelectedIndex = 2;
        }
        else if (this.tabSelectedIndex === 2) {
            this.tabSelectedIndex = 0;
        }
    };
    // search bar
    ItemsComponent.prototype.onTextChanged = function (args) {
        var searchBar = args.object;
        if (searchBar.text != "") {
            var searchValue_1 = searchBar.text.toLowerCase();
            if (searchBar.text != "") {
                this.myItems = this.items.filter(function (item) {
                    return (item.name + " " + item.name).toLowerCase().indexOf(searchValue_1.toLowerCase()) > -1;
                });
            }
            else {
                setTimeout(function () {
                    searchBar.dismissSoftInput();
                }, 300);
            }
        }
        else {
            // this.myItems.length=0;
            // this.filterByLocation();
        }
    };
    ItemsComponent.prototype.searchLoaded = function (event) {
        this.searchPhrase = "";
        event.object.android.setFocusableInTouchMode(false);
    };
    ItemsComponent.prototype.onSubmit = function (args) {
        var searchbar = args.object;
        searchbar.dismissSoftInput();
    };
    ItemsComponent.prototype.onClear = function (args) {
        var searchbar = args.object;
        searchbar.dismissSoftInput();
    };
    ItemsComponent.prototype.onRegister = function () {
        this.routerextensions.navigate(['register']);
    };
    ItemsComponent.prototype.onSignin = function () {
        this.routerextensions.navigate(['signin']);
    };
    ItemsComponent.prototype.onSignout = function () {
        this.auth.signout();
    };
    //For your picks...
    ItemsComponent.prototype.topThreeCafes = function () {
        this.orderservice.frequentCafe("CBNUluA6FogVIkOSlD4WKOFvMjf1");
    };
    ItemsComponent.prototype.onTapCurrentOrder = function () {
        this.orderComplexLocalFilter = this.orderComplexLocal.filter(function (x) {
            return x.status != "collected";
        });
    };
    ItemsComponent.prototype.onTapPastOrders = function () {
        this.orderComplexLocalFilter = this.orderComplexLocal.filter(function (x) {
            return x.status === "collected";
        });
    };
    ItemsComponent.prototype.totalPrice = function (order) {
        var total = "0";
        order.forEach(function (x) {
            //for total
            total = (Math.round((parseFloat(total) + parseFloat(x.price)) * 100) / 100).toString();
        });
        return total;
    };
    ItemsComponent.prototype.filterByLocation = function () {
        var _this = this;
        var date = new Date();
        this.items.forEach(function (x) {
            _this.myItems.length = 0;
            var that = _this;
            nativescript_geolocation_1.getCurrentLocation({ desiredAccuracy: 1, updateDistance: 10, maximumAge: 20000, timeout: 5000 }).
                then(function (loc) {
                if (loc) {
                    var a = nativescript_geolocation_1.distance(loc, { "latitude": x.lat, "longitude": x.lng, "direction": 0, "horizontalAccuracy": 14,
                        "verticalAccuracy": 14, "speed": 0, "altitude": 89, "timestamp": date });
                    if (a < 25000) {
                        that.myItems.push(x);
                    }
                    else {
                        //remove this when we need filtering by location
                        // that.myItems.push(x);
                    }
                }
            }, function (e) {
                //push anyway
                that.myItems.push(x);
            });
        });
    };
    ItemsComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./items.component.html",
            styleUrls: ["./items.component.css"]
        }),
        __metadata("design:paramtypes", [item_service_1.ItemService,
            router_1.Router,
            nativescript_angular_1.RouterExtensions,
            auth_service_1.AuthService,
            order_service_1.OrderService])
    ], ItemsComponent);
    return ItemsComponent;
}());
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var item_service_1 = require("../services/item.service");
var router_1 = require("@angular/router");
// import { MapboxViewApi, Viewport as MapboxViewport } from "nativescript-mapbox";
var nativescript_angular_1 = require("nativescript-angular");
var observable_array_1 = require("data/observable-array");
var auth_service_1 = require("../services/auth.service");
var order_service_1 = require("../services/order.service");
var firebase = require("nativescript-plugin-firebase");
//trying location
var nativescript_geolocation_1 = require("nativescript-geolocation");
// var Vibrate = require("nativescript-vibrate").Vibrate;
// let vibrator = new Vibrate();
var ItemsComponent = /** @class */ (function () {
    function ItemsComponent(itemService, router, routerextensions, auth, orderservice) {
        this.itemService = itemService;
        this.router = router;
        this.routerextensions = routerextensions;
        this.auth = auth;
        this.orderservice = orderservice;
        this.items = [];
        this.myItems = [];
        this.orderList = [];
        this._orderList = new observable_array_1.ObservableArray([]);
        this._items = new observable_array_1.ObservableArray([]);
        this.orderComplexLocal = [];
        this.orderComplexLocalFilter = [];
        this.orderDisplay = { "key": "", "uid": "", "status": "", "order": null,
            "cafeOwner": "", "location": "", "orderNo2": "", "imgSrc": "", "total": "" };
        this._order = new observable_array_1.ObservableArray([]);
        this.frequentCafes = [];
        this.startLocation = new nativescript_geolocation_1.Location();
        this.username = "";
        this.tabSelectedIndex = 0;
    }
    ItemsComponent.prototype.ngOnInit = function () {
        var _this = this;
        var date = new Date();
        this.itemService.load()
            .subscribe(function (items) {
            _this._items = new observable_array_1.ObservableArray(items);
            _this.items = [];
            _this._items.forEach(function (x) {
                var that = _this;
                //Testing current location
                var location = nativescript_geolocation_1.getCurrentLocation({ desiredAccuracy: 1, updateDistance: 10, maximumAge: 20000, timeout: 5000 }).
                    then(function (loc) {
                    if (loc) {
                        var a = nativescript_geolocation_1.distance(loc, { "latitude": x.lat, "longitude": x.lng, "direction": 0, "horizontalAccuracy": 14,
                            "verticalAccuracy": 14, "speed": 0, "altitude": 89, "timestamp": date });
                        if (a < 10000) {
                            that.items.push(x);
                        }
                        else {
                        }
                    }
                }, function (e) {
                    //push anyway
                    that.items.push(x);
                });
            });
            _this.myItems = _this.items;
        });
        //order load for your picks
        firebase.getCurrentUser()
            .then(function (token) {
            _this.orderservice.loadOrder(token.uid)
                .subscribe(function (orderlist) {
                _this.orderComplexLocal = [];
                _this._orderList = new observable_array_1.ObservableArray(orderlist);
                _this.orderList = [];
                _this._orderList.forEach(function (x) {
                    // vibrator.vibrate(2000);
                    _this.orderList.push(x);
                });
                _this.orderList.forEach(function (x) {
                    //get Cafe details
                    _this.itemService.fetchCafeInfo(x.cafe)
                        .then(function (res) {
                        Object.keys(res.value).forEach(function (y) {
                            _this.orderservice.getOrderDetails(x.cafe, x.orderNo)
                                .then(function (result) {
                                _this.orderDisplay.cafeOwner = res.value[y].name;
                                _this.orderDisplay.imgSrc = res.value[y].imgSrc;
                                _this.orderDisplay.key = result.value.key;
                                _this.orderDisplay.uid = result.value.uid;
                                _this.orderDisplay.status = result.value.status;
                                _this.orderDisplay.orderNo2 = result.value.orderNo2;
                                _this.orderDisplay.order = result.value.order;
                                _this.orderDisplay.total = _this.totalPrice(_this.orderDisplay.order);
                                _this.orderComplexLocal.push(_this.orderDisplay);
                                _this.orderDisplay = { "key": "", "uid": "", "status": "", "order": null,
                                    "cafeOwner": "", "location": "", "orderNo2": "", "imgSrc": "", "total": "" };
                            });
                        });
                    });
                });
            });
            _this.ontapListofFrequent(token.uid);
        });
    };
    //Frequently visited
    ItemsComponent.prototype.ontapListofFrequent = function (token) {
        var _this = this;
        var counts;
        this.orderservice.frequentCafe(token)
            .then(function (res) {
            Object.keys(res.value).forEach(function (x) {
                _this.frequentCafes.push(res.value[x].cafe);
            });
        })
            .catch();
    };
    //Navitage to next screen
    ItemsComponent.prototype.jumptoMenu = function (cafeId) {
        var _this = this;
        setTimeout(function () {
            _this.routerextensions.navigate(["/cafe", cafeId], {
                animated: true,
                transition: {
                    name: "slide",
                    duration: 200,
                    curve: "ease"
                }
            }), 100;
        });
    };
    //
    // //TabView controls
    ItemsComponent.prototype.changeTab = function () {
        if (this.tabSelectedIndex === 0) {
            this.tabSelectedIndex = 1;
        }
        else if (this.tabSelectedIndex === 1) {
            this.tabSelectedIndex = 2;
        }
        else if (this.tabSelectedIndex === 2) {
            this.tabSelectedIndex = 0;
        }
    };
    // search bar
    ItemsComponent.prototype.onTextChanged = function (args) {
        var searchBar = args.object;
        var searchValue = searchBar.text.toLowerCase();
        if (searchBar.text != "") {
            this.myItems = this.items.filter(function (item) {
                return (item.name + " " + item.name).toLowerCase().indexOf(searchValue.toLowerCase()) > -1;
            });
        }
        else {
            setTimeout(function () {
                searchBar.dismissSoftInput();
            }, 300);
        }
    };
    ItemsComponent.prototype.searchLoaded = function (event) {
        this.searchPhrase = "";
        event.object.android.setFocusableInTouchMode(false);
    };
    ItemsComponent.prototype.onSubmit = function (args) {
        var searchbar = args.object;
        console.log("onSubmit");
        searchbar.dismissSoftInput();
    };
    // onSearchLayoutLoaded(event) {
    //     if (event.object.android) {
    //         event.object.android.setFocusableInTouchMode(false);
    //     }
    // }
    ItemsComponent.prototype.onClear = function (args) {
        var searchbar = args.object;
        console.log("onClear");
        searchbar.dismissSoftInput();
    };
    ItemsComponent.prototype.onRegister = function () {
        this.routerextensions.navigate(['register']);
    };
    ItemsComponent.prototype.onSignin = function () {
        this.routerextensions.navigate(['signin']);
    };
    ItemsComponent.prototype.onSignout = function () {
        this.auth.signout();
    };
    //For your picks...
    ItemsComponent.prototype.topThreeCafes = function () {
        this.orderservice.frequentCafe("CBNUluA6FogVIkOSlD4WKOFvMjf1");
    };
    ItemsComponent.prototype.onTapCurrentOrder = function () {
        this.orderComplexLocalFilter = this.orderComplexLocal.filter(function (x) {
            console.log("current order triggered");
            return x.status != "collected";
        });
    };
    ItemsComponent.prototype.onTapPastOrders = function () {
        this.orderComplexLocalFilter = this.orderComplexLocal.filter(function (x) {
            return x.status === "collected";
        });
    };
    ItemsComponent.prototype.totalPrice = function (order) {
        var total = "0";
        order.forEach(function (x) {
            //for total
            total = (Math.round((parseFloat(total) + parseFloat(x.price)) * 100) / 100).toString();
        });
        return total;
    };
    ItemsComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./items.component.html",
            styleUrls: ["./items.component.css"]
        }),
        __metadata("design:paramtypes", [item_service_1.ItemService,
            router_1.Router,
            nativescript_angular_1.RouterExtensions,
            auth_service_1.AuthService,
            order_service_1.OrderService])
    ], ItemsComponent);
    return ItemsComponent;
}());
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXRlbXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWdEO0FBRWhELHlEQUF1RDtBQUN2RCwwQ0FBd0M7QUFDeEMsbUZBQW1GO0FBQ25GLDZEQUFzRDtBQUN0RCwwREFBc0Q7QUFLdEQseURBQXFEO0FBRXJELDJEQUF1RDtBQUV2RCx1REFBMEQ7QUFFMUQsaUJBQWlCO0FBQ2pCLHFFQUE4STtBQUU5SSx5REFBeUQ7QUFDekQsZ0NBQWdDO0FBVWhDO0lBcUJJLHdCQUFvQixXQUF3QixFQUN4QixNQUFhLEVBQ2IsZ0JBQWlDLEVBQ2pDLElBQWdCLEVBQ2hCLFlBQXlCO1FBSnpCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLFdBQU0sR0FBTixNQUFNLENBQU87UUFDYixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWlCO1FBQ2pDLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsaUJBQVksR0FBWixZQUFZLENBQWE7UUF2QjdDLFVBQUssR0FBUyxFQUFFLENBQUM7UUFDakIsWUFBTyxHQUFRLEVBQUUsQ0FBQztRQUNsQixjQUFTLEdBQW9ELEVBQUUsQ0FBQztRQUNoRSxlQUFVLEdBQXFFLElBQUksa0NBQWUsQ0FBbUQsRUFBRSxDQUFDLENBQUM7UUFDekosV0FBTSxHQUF5QixJQUFJLGtDQUFlLENBQU8sRUFBRSxDQUFDLENBQUM7UUFDN0Qsc0JBQWlCLEdBQWdCLEVBQUUsQ0FBQztRQUNwQyw0QkFBdUIsR0FBZ0IsRUFBRSxDQUFDO1FBQzFDLGlCQUFZLEdBQWMsRUFBQyxLQUFLLEVBQUMsRUFBRSxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUMsUUFBUSxFQUFDLEVBQUUsRUFBQyxPQUFPLEVBQUUsSUFBSTtZQUNsRSxXQUFXLEVBQUMsRUFBRSxFQUFDLFVBQVUsRUFBQyxFQUFFLEVBQUMsVUFBVSxFQUFDLEVBQUUsRUFBQyxRQUFRLEVBQUMs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QVU7WUFDcEIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ25CLFdBQVcsRUFBRSx3QkFBd0I7WUFDckMsU0FBUyxFQUFDLENBQUMsdUJBQXVCLENBQUM7U0FDdEMsQ0FBQzt5Q0F1Qm1DLDBCQUFXO1lBQ2pCLGVBQU07WUFDSSx1Q0FBZ0I7WUFDNUIsMEJBQVc7WUFDSCw0QkFBWTtPQXpCcEMsY0FBYyxDQStPMUI7SUFBRCxxQkFBQztDQUFBLEFBL09ELElBK09DO0FBL09ZLHdDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIE9uSW5pdH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEl0ZW0gfSBmcm9tIFwiLi4vZGF0YXR5cGVzL2l0ZW1cIjtcbmltcG9ydCB7IEl0ZW1TZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2l0ZW0uc2VydmljZVwiO1xuaW1wb3J0IHsgUm91dGVyfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XG4vLyBpbXBvcnQgeyBNYXBib3hWaWV3QXBpLCBWaWV3cG9ydCBhcyBNYXBib3hWaWV3cG9ydCB9IGZyb20gXCJuYXRpdmVzY3JpcHQtbWFwYm94XCI7XG5pbXBvcnQge1JvdXRlckV4dGVuc2lvbnN9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhclwiO1xuaW1wb3J0IHtPYnNlcnZhYmxlQXJyYXl9IGZyb20gXCJkYXRhL29ic2VydmFibGUtYXJyYXlcIjtcbmltcG9ydCB7IFNlYXJjaEJhciB9IGZyb20gXCJ1aS9zZWFyY2gtYmFyXCI7XG5cblxuXG5pbXBvcnQge0F1dGhTZXJ2aWNlfSBmcm9tIFwiLi4vc2VydmljZXMvYXV0aC5zZXJ2aWNlXCI7XG5pbXBvcnQge09yZGVyfSBmcm9tIFwiLi4vZGF0YXR5cGVzL29yZGVyXCI7XG5pbXBvcnQge09yZGVyU2VydmljZX0gZnJvbSBcIi4uL3NlcnZpY2VzL29yZGVyLnNlcnZpY2VcIjtcbmltcG9ydCB7T3JkZXJEaXNwbGF5fSBmcm9tIFwiLi4vZGF0YXR5cGVzL29yZGVyLmRpc3BsYXlcIjtcbmltcG9ydCBmaXJlYmFzZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtcGx1Z2luLWZpcmViYXNlXCIpO1xuXG4vL3RyeWluZyBsb2NhdGlvblxuaW1wb3J0IHtMb2NhdGlvbiwgaXNFbmFibGVkLCBlbmFibGVMb2NhdGlvblJlcXVlc3QsIGdldEN1cnJlbnRMb2NhdGlvbiwgd2F0Y2hMb2NhdGlvbiwgZGlzdGFuY2UsIGNsZWFyV2F0Y2ggfSBmcm9tIFwibmF0aXZlc2NyaXB0LWdlb2xvY2F0aW9uXCI7XG5pbXBvcnQge0FjY3VyYWN5fSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9lbnVtcy9lbnVtc1wiO1xuLy8gdmFyIFZpYnJhdGUgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXZpYnJhdGVcIikuVmlicmF0ZTtcbi8vIGxldCB2aWJyYXRvciA9IG5ldyBWaWJyYXRlKCk7XG5cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwibnMtaXRlbXNcIixcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHRlbXBsYXRlVXJsOiBcIi4vaXRlbXMuY29tcG9uZW50Lmh0bWxcIixcbiAgICBzdHlsZVVybHM6W1wiLi9pdGVtcy5jb21wb25lbnQuY3NzXCJdXG59KVxuXG5leHBvcnQgY2xhc3MgSXRlbXNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXR7XG4gICAgYnVzaW5lc3NOYW1lOiBTdHJpbmdbXTtcbiAgICBpdGVtczogSXRlbVtdPVtdO1xuICAgIG15SXRlbXM6SXRlbVtdPVtdO1xuICAgIG9yZGVyTGlzdDp7XCJvcmRlck5vXCI6c3RyaW5nLFwiY2FmZVwiOnN0cmluZyxcInN0YXR1c1wiOnN0cmluZ31bXT1bXTtcbiAgICBfb3JkZXJMaXN0Ok9ic2VydmFibGVBcnJheTx7XCJvcmRlck5vXCI6c3RyaW5nLFwiY2FmZVwiOnN0cmluZyxcInN0YXR1c1wiOnN0cmluZ30+ID0gbmV3IE9ic2VydmFibGVBcnJheTx7XCJvcmRlck5vXCI6c3RyaW5nLFwiY2FmZVwiOnN0cmluZyxcInN0YXR1c1wiOnN0cmluZ30+KFtdKTtcbiAgICBfaXRlbXM6T2JzZXJ2YWJsZUFycmF5PEl0ZW0+ID0gbmV3IE9ic2VydmFibGVBcnJheTxJdGVtPihbXSk7XG4gICAgb3JkZXJDb21wbGV4TG9jYWw6T3JkZXJEaXNwbGF5W109W107XG4gICAgb3JkZXJDb21wbGV4TG9jYWxGaWx0ZXI6T3JkZXJEaXNwbGF5W109W107XG4gICAgb3JkZXJEaXNwbGF5Ok9yZGVyRGlzcGxheT17XCJrZXlcIjpcIlwiLFwidWlkXCI6XCJcIixcInN0YXR1c1wiOlwiXCIsXCJvcmRlclwiOiBudWxsLFxuICAgICAgICBcImNhZmVPd25lclwiOlwiXCIsXCJsb2NhdGlvblwiOlwiXCIsXCJvcmRlck5vMlwiOlwiXCIsXCJpbWdTcmNcIjpcIlwiLFwidG90YWxcIjpcIlwifVxuICAgIF9vcmRlcjpPYnNlcnZhYmxlQXJyYXk8T3JkZXJEaXNwbGF5PiA9IG5ldyBPYnNlcnZhYmxlQXJyYXk8T3JkZXJEaXNwbGF5PihbXSk7XG4gICAgZnJlcXVlbnRDYWZlczpzdHJpbmdbXT1bXTtcblxuICAgIHN0YXJ0TG9jYXRpb246TG9jYXRpb249bmV3IExvY2F0aW9uKCk7XG5cbiAgICBwdWJsaWMgdGFiU2VsZWN0ZWRJbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBzZWFyY2hQaHJhc2U6IHN0cmluZztcbiAgICB1c2VybmFtZTpzdHJpbmc9XCJcIjtcbiAgICBwcml2YXRlIF9jdXJyZW50Tm90aWZpY2F0aW9uOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGl0ZW1TZXJ2aWNlOiBJdGVtU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHJvdXRlcjpSb3V0ZXIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSByb3V0ZXJleHRlbnNpb25zOlJvdXRlckV4dGVuc2lvbnMsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBhdXRoOkF1dGhTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgb3JkZXJzZXJ2aWNlOk9yZGVyU2VydmljZSkge1xuICAgICAgICB0aGlzLnRhYlNlbGVjdGVkSW5kZXggPSAwO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuXG4gICAgICAgIGNvbnN0IGRhdGU6IERhdGUgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAgIHRoaXMuaXRlbVNlcnZpY2UubG9hZCgpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChpdGVtczogQXJyYXk8SXRlbT4pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pdGVtcyA9IG5ldyBPYnNlcnZhYmxlQXJyYXkoaXRlbXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXM9W107XG4gICAgICAgICAgICAgICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoeCk9PntcblxuICAgICAgICAgICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgLy9UZXN0aW5nIGN1cnJlbnQgbG9jYXRpb25cbiAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBnZXRDdXJyZW50TG9jYXRpb24oe2Rlc2lyZWRBY2N1cmFjeTogMSwgdXBkYXRlRGlzdGFuY2U6IDEwLCBtYXhpbXVtQWdlOiAyMDAwMCwgdGltZW91dDogNTAwMH0pLlxuICAgICAgICAgICAgICAgICAgICB0aGVuKGZ1bmN0aW9uKGxvYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvYykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGRpc3RhbmNlKGxvYyx7XCJsYXRpdHVkZVwiOngubGF0LFwibG9uZ2l0dWRlXCI6eC5sbmcsIFwiZGlyZWN0aW9uXCI6MCwgXCJob3Jpem9udGFsQWNjdXJhY3lcIjoxNCxcbiAgICAgICAgICAgICAgICAgICAgXCJ2ZXJ0aWNhbEFjY3VyYWN5XCI6MTQsXCJzcGVlZFwiOjAsXCJhbHRpdHVkZVwiOjg5LFwidGltZXN0YW1wXCI6ZGF0ZX0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKGE8MTAwMDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5pdGVtcy5wdXNoKHgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICAgICAgLy9wdXNoIGFueXdheVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5pdGVtcy5wdXNoKHgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMubXlJdGVtcz10aGlzLml0ZW1zO1xuICAgICAgICAgICAgfSk7XG5cblxuLy9vcmRlciBsb2FkIGZvciB5b3VyIHBpY2tzXG4gICAgICAgIGZpcmViYXNlLmdldEN1cnJlbnRVc2VyKClcbiAgICAgICAgICAgIC50aGVuKCh0b2tlbik9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcmRlcnNlcnZpY2UubG9hZE9yZGVyKHRva2VuLnVpZClcbiAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZSgob3JkZXJsaXN0OiBBcnJheTx7XCJvcmRlck5vXCI6c3RyaW5nLFwiY2FmZVwiOnN0cmluZyxcInN0YXR1c1wiOnN0cmluZ30+KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9yZGVyQ29tcGxleExvY2FsPVtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3JkZXJMaXN0ID0gbmV3IE9ic2VydmFibGVBcnJheShvcmRlcmxpc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmRlckxpc3Q9W107XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcmRlckxpc3QuZm9yRWFjaCgoeCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2aWJyYXRvci52aWJyYXRlKDIwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3JkZXJMaXN0LnB1c2goeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmRlckxpc3QuZm9yRWFjaCgoeCk9Pntcbi8vZ2V0IENhZmUgZGV0YWlsc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbVNlcnZpY2UuZmV0Y2hDYWZlSW5mbyh4LmNhZmUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHJlcyk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMocmVzLnZhbHVlKS5mb3JFYWNoKCh5KT0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3JkZXJzZXJ2aWNlLmdldE9yZGVyRGV0YWlscyh4LmNhZmUseC5vcmRlck5vKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigocmVzdWx0KT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmRlckRpc3BsYXkuY2FmZU93bmVyPXJlcy52YWx1ZVt5XS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmRlckRpc3BsYXkuaW1nU3JjID0gcmVzLnZhbHVlW3ldLmltZ1NyYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3JkZXJEaXNwbGF5LmtleSA9IHJlc3VsdC52YWx1ZS5rZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9yZGVyRGlzcGxheS51aWQgPSByZXN1bHQudmFsdWUudWlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmRlckRpc3BsYXkuc3RhdHVzID0gcmVzdWx0LnZhbHVlLnN0YXR1cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3JkZXJEaXNwbGF5Lm9yZGVyTm8yID0gcmVzdWx0LnZhbHVlLm9yZGVyTm8yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmRlckRpc3BsYXkub3JkZXI9cmVzdWx0LnZhbHVlLm9yZGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmRlckRpc3BsYXkudG90YWw9dGhpcy50b3RhbFByaWNlKHRoaXMub3JkZXJEaXNwbGF5Lm9yZGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmRlckNvbXBsZXhMb2NhbC5wdXNoKHRoaXMub3JkZXJEaXNwbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3JkZXJEaXNwbGF5PSB7XCJrZXlcIjpcIlwiLFwidWlkXCI6XCJcIixcInN0YXR1c1wiOlwiXCIsXCJvcmRlclwiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2FmZU93bmVyXCI6XCJcIixcImxvY2F0aW9uXCI6XCJcIixcIm9yZGVyTm8yXCI6XCJcIixcImltZ1NyY1wiOlwiXCIsXCJ0b3RhbFwiOlwiXCJ9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLm9udGFwTGlzdG9mRnJlcXVlbnQodG9rZW4udWlkKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgfVxuXG4vL0ZyZXF1ZW50bHkgdmlzaXRlZFxub250YXBMaXN0b2ZGcmVxdWVudCh0b2tlbil7XG4gICAgdmFyIGNvdW50czoge31bXTtcbiAgICAgICAgdGhpcy5vcmRlcnNlcnZpY2UuZnJlcXVlbnRDYWZlKHRva2VuKVxuICAgICAgICAudGhlbihcbiAgICAgICAgICAgIChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhyZXMudmFsdWUpLmZvckVhY2goKHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mcmVxdWVudENhZmVzLnB1c2gocmVzLnZhbHVlW3hdLmNhZmUpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKTtcbiAgICAgICAgfVxuXG4vL05hdml0YWdlIHRvIG5leHQgc2NyZWVuXG4gICAgICAgICAgICBqdW1wdG9NZW51KGNhZmVJZCkge1xuICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9Pnt0aGlzLnJvdXRlcmV4dGVuc2lvbnMubmF2aWdhdGUoW1wiL2NhZmVcIiwgY2FmZUlkXSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJzbGlkZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VydmU6IFwiZWFzZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLDEwMH0pO1xuICAgICAgICAgICAgfVxuLy9cbi8vIC8vVGFiVmlldyBjb250cm9sc1xuICAgIGNoYW5nZVRhYigpIHtcblxuICAgICAgICBpZiAodGhpcy50YWJTZWxlY3RlZEluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnRhYlNlbGVjdGVkSW5kZXggPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMudGFiU2VsZWN0ZWRJbmRleCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy50YWJTZWxlY3RlZEluZGV4ID0gMjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRhYlNlbGVjdGVkSW5kZXggPT09IDIpIHtcbiAgICAgICAgICAgIHRoaXMudGFiU2VsZWN0ZWRJbmRleCA9IDA7XG4gICAgICAgIH1cblxuXG4gICAgfVxuXG4vLyBzZWFyY2ggYmFyXG5cbiAgICBwdWJsaWMgb25UZXh0Q2hhbmdlZChhcmdzKSB7XG4gICAgICAgIGxldCBzZWFyY2hCYXIgPSA8U2VhcmNoQmFyPmFyZ3Mub2JqZWN0O1xuICAgICAgICBsZXQgc2VhcmNoVmFsdWUgPSBzZWFyY2hCYXIudGV4dC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGlmIChzZWFyY2hCYXIudGV4dCAhPSBcIlwiKXtcbiAgICAgICAgICAgIHRoaXMubXlJdGVtcyA9IHRoaXMuaXRlbXMuZmlsdGVyKCBpdGVtID0+IHtcbiAgICAgICAgICAgIHJldHVybiBgJHtpdGVtLm5hbWV9ICR7aXRlbS5uYW1lfWAudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlYXJjaFZhbHVlLnRvTG93ZXJDYXNlKCkpID4gLTE7XG4gICAgICAgIH0pO31cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNlYXJjaEJhci5kaXNtaXNzU29mdElucHV0KCk7XG4gICAgICAgICAgICB9LCAzMDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VhcmNoTG9hZGVkKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuc2VhcmNoUGhyYXNlID0gXCJcIjtcbiAgICAgICAgZXZlbnQub2JqZWN0LmFuZHJvaWQuc2V0Rm9jdXNhYmxlSW5Ub3VjaE1vZGUoZmFsc2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvblN1Ym1pdChhcmdzKSB7XG4gICAgICAgIGxldCBzZWFyY2hiYXIgPSA8U2VhcmNoQmFyPmFyZ3Mub2JqZWN0O1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwib25TdWJtaXRcIik7XG4gICAgICAgIHNlYXJjaGJhci5kaXNtaXNzU29mdElucHV0KCk7XG4gICAgfVxuXG5cbiAgICAvLyBvblNlYXJjaExheW91dExvYWRlZChldmVudCkge1xuICAgIC8vICAgICBpZiAoZXZlbnQub2JqZWN0LmFuZHJvaWQpIHtcbiAgICAvLyAgICAgICAgIGV2ZW50Lm9iamVjdC5hbmRyb2lkLnNldEZvY3VzYWJsZUluVG91Y2hNb2RlKGZhbHNlKTtcbiAgICAvLyAgICAgfVxuICAgIC8vIH1cbiAgICBwdWJsaWMgb25DbGVhcihhcmdzKSB7XG4gICAgICAgIGxldCBzZWFyY2hiYXIgPSA8U2VhcmNoQmFyPmFyZ3Mub2JqZWN0O1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwib25DbGVhclwiKTtcbiAgICAgICAgc2VhcmNoYmFyLmRpc21pc3NTb2Z0SW5wdXQoKTtcbiAgICB9XG5cblxuICAgIG9uUmVnaXN0ZXIoKXtcblxuICAgIHRoaXMucm91dGVyZXh0ZW5zaW9ucy5uYXZpZ2F0ZShbJ3JlZ2lzdGVyJ10pO1xuXG4gICAgfVxuXG4gICAgb25TaWduaW4oKXtcblxuICAgICAgICB0aGlzLnJvdXRlcmV4dGVuc2lvbnMubmF2aWdhdGUoWydzaWduaW4nXSk7XG5cbiAgICB9XG5cbiAgICBvblNpZ25vdXQoKXtcblxuICAgICAgICB0aGlzLmF1dGguc2lnbm91dCgpO1xuICAgIH1cblxuXG4vL0ZvciB5b3VyIHBpY2tzLi4uXG4gICAgICAgIHRvcFRocmVlQ2FmZXMoKXtcblxuICAgICAgICAgICAgdGhpcy5vcmRlcnNlcnZpY2UuZnJlcXVlbnRDYWZlKFwiQ0JOVWx1QTZGb2dWSWtPU2xENFdLT0Z2TWpmMVwiKTtcblxuICAgICAgICB9XG5cblxuICAgIG9uVGFwQ3VycmVudE9yZGVyKCl7XG4gICAgICAgIHRoaXMub3JkZXJDb21wbGV4TG9jYWxGaWx0ZXIgPSB0aGlzLm9yZGVyQ29tcGxleExvY2FsLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjdXJyZW50IG9yZGVyIHRyaWdnZXJlZFwiKTtcbiAgICAgICAgICAgIHJldHVybiB4LnN0YXR1cyAhPSBcImNvbGxlY3RlZFwiXG5cbiAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIG9uVGFwUGFzdE9yZGVycygpe1xuICAgICAgICB0aGlzLm9yZGVyQ29tcGxleExvY2FsRmlsdGVyID0gdGhpcy5vcmRlckNvbXBsZXhMb2NhbC5maWx0ZXIoZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgcmV0dXJuIHguc3RhdHVzID09PSBcImNvbGxlY3RlZFwiXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgdG90YWxQcmljZShvcmRlcjpPcmRlcltdKXtcbiAgICAgICAgdmFyIHRvdGFsPVwiMFwiO1xuICAgICAgICBvcmRlci5mb3JFYWNoKCh4KT0+e1xuICAgICAgICAgICAgLy9mb3IgdG90YWxcbiAgICAgICAgICAgIHRvdGFsPShNYXRoLnJvdW5kKChwYXJzZUZsb2F0KHRvdGFsKSsgcGFyc2VGbG9hdCh4LnByaWNlKSkqMTAwKS8xMDApLnRvU3RyaW5nKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdG90YWw7XG4gICAgfVxuXG59XG4iXX0=
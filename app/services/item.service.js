"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var firebase = require("nativescript-plugin-firebase");
var ItemService = /** @class */ (function () {
    function ItemService() {
        this.businessName = "";
        this.items = new Array();
    }
    ItemService.prototype.getItems = function () {
        var _this = this;
        var base = "/businessName/cafe";
        var cafeName = "";
        var counter = 0;
        for (counter = 0; counter < 6; counter++) {
            var count = (counter + 1).toString();
            var cafeName = cafeName.concat(base, count);
            console.log(cafeName);
            var a = firebase.query(function () {
            }, cafeName, {
                singleEvent: true,
                orderBy: {
                    type: firebase.QueryOrderByType.KEY
                }
            }).then((function (res) {
                //console.log("something should come here", JSON.stringify(res.value));
                var b = res.value;
                //console.log(JSON.stringify(b.menu));
                //console.log(JSON.stringify(b.menu.menuItem1.name));
                //var c = JSON.stringify(b.menu);
                //var d = b.menu;
                //console.log("length is " + res.value.menu.getChildrenCount());
                _this.items.push(res.value);
            })).catch((function (res) {
                console.log("yahan kuch panga hai...", res);
            }));
            //console.log("length is and path is " + this.items.length + " " + this.items[counter].path);
            cafeName = "";
        }
        return this.items;
    };
    ItemService.prototype.getItem = function (id) {
        console.log("items gotten back " + id);
        return this.items.filter(function (item) { return item.id === id; })[0];
    };
    ItemService = __decorate([
        core_1.Injectable()
    ], ItemService);
    return ItemService;
}());
exports.ItemService = ItemService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXRlbS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBRTNDLHVEQUEwRDtBQUkxRDtJQURBO1FBR1ksaUJBQVksR0FBRyxFQUFFLENBQUM7UUFFbEIsVUFBSyxHQUFHLElBQUksS0FBSyxFQUt4QixDQUFDO0lBZ0ROLENBQUM7SUE5Q0csOEJBQVEsR0FBUjtRQUFBLGlCQXdDQztRQXZDRyxJQUFJLElBQUksR0FBRyxvQkFBb0IsQ0FBQztRQUNoQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBRWhCLEdBQUcsQ0FBQSxDQUFDLE9BQU8sR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDO1lBRXRDLElBQUksS0FBSyxHQUFHLENBQUMsT0FBTyxHQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ25DLElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFdEIsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FDbEI7WUFDQSxDQUFDLEVBQ0QsUUFBUSxFQUNSO2dCQUNJLFdBQVcsRUFBRSxJQUFJO2dCQUNqQixPQUFPLEVBQUU7b0JBQ0wsSUFBSSxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHO2lCQUN0QzthQUNKLENBQ0osQ0FBQyxJQUFJLENBQ0YsQ0FBQyxVQUFBLEdBQUc7Z0JBQ0EsdUVBQXVFO2dCQUN2RSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO2dCQUNsQixzQ0FBc0M7Z0JBQ3RDLHFEQUFxRDtnQkFDckQsaUNBQWlDO2dCQUNqQyxpQkFBaUI7Z0JBQ2pCLGdFQUFnRTtnQkFDaEUsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9CLENBQUMsQ0FBQyxDQUNMLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBQSxHQUFHO2dCQUNSLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLEVBQUUsR0FBRyxDQUFDLENBQUE7WUFDL0MsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNILDZGQUE2RjtZQUM3RixRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQsNkJBQU8sR0FBUCxVQUFRLEVBQVU7UUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFkLENBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUF4RFEsV0FBVztRQUR2QixpQkFBVSxFQUFFO09BQ0EsV0FBVyxDQXlEdkI7SUFBRCxrQkFBQztDQUFBLEFBekRELElBeURDO0FBekRZLGtDQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJdGVtIH0gZnJvbSBcIi4uL2RhdGF0eXBlcy9pdGVtXCI7XG5pbXBvcnQgZmlyZWJhc2UgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXBsdWdpbi1maXJlYmFzZVwiKTtcblxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSXRlbVNlcnZpY2Uge1xuXG4gICAgcHJpdmF0ZSBidXNpbmVzc05hbWUgPSBcIlwiO1xuXG4gICAgcHJpdmF0ZSBpdGVtcyA9IG5ldyBBcnJheTxJdGVtPihcbiAgICAgICAgLy97IGlkOiAxLCBuYW1lOiBcIk1hc2FsYSBDdXJyeSBDYWZlXCIsIGNhdGVnb3J5OiBcIkluZGlhblwiLCBpbWdTcmM6IFwiaHR0cHM6Ly9jZG41Lm5vcmVjaXBlcy5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTcvMDUvMDUwMjE3NDcvY2hpY2tlbi1iaXJ5YW5pLTExLmpwZ1wiLCBtZW51OiBcInttZW51SXRlbTE6e25hbWU6Q2hpY2tlbiBCaXJ5YW5pLCBwcmljZTogOS45NX0sIHttZW51SXRlbTI6e25hbWU6VmVnIEJpcnlhbmksIHByaWNlOiA4Ljk1fX1cIn0sXG4gICAgICAgIC8veyBpZDogMSwgbmFtZTogXCJNYXNhbGEgQ3VycnkgQ2FmZSAyXCIsIGNhdGVnb3J5OiBcIkluZGlhblwiLCBpbWdTcmM6IFwiaHR0cHM6Ly9jZG41Lm5vcmVjaXBlcy5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTcvMDUvMDUwMjE3NDcvY2hpY2tlbi1iaXJ5YW5pLTExLmpwZ1wiLCBtZW51OiBcInttZW51SXRlbTE6e25hbWU6Q2hpY2tlbiBCaXJ5YW5pLCBwcmljZTogOS45NX0sIHttZW51SXRlbTI6e25hbWU6VmVnIEJpcnlhbmksIHByaWNlOiA4Ljk1fX1cIn1cbiAgICAgICAgLy97IGlkOiAyLCBuYW1lOiBcIk1hc3QgSmFwYW5pIENhZmVcIiwgY2F0ZWdvcnk6IFwiSmFwYW5pIENhZmVcIiB9LFxuICAgICAgICAvL3sgaWQ6IDMsIG5hbWU6IFwiTnlhbGFcIiwgY2F0ZWdvcnk6IFwiRXRoaW9waWFuIENhZmVcIiB9LFxuICAgICk7XG5cbiAgICBnZXRJdGVtcygpOiBJdGVtW10ge1xuICAgICAgICB2YXIgYmFzZSA9IFwiL2J1c2luZXNzTmFtZS9jYWZlXCI7XG4gICAgICAgIHZhciBjYWZlTmFtZSA9IFwiXCI7XG4gICAgICAgIHZhciBjb3VudGVyID0gMDtcblxuICAgICAgICBmb3IoY291bnRlciA9IDA7IGNvdW50ZXIgPCA2OyBjb3VudGVyKyspIHtcblxuICAgICAgICAgICAgdmFyIGNvdW50ID0gKGNvdW50ZXIrMSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHZhciBjYWZlTmFtZSA9IGNhZmVOYW1lLmNvbmNhdChiYXNlLCBjb3VudCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjYWZlTmFtZSk7XG5cbiAgICAgICAgICAgIHZhciBhID0gZmlyZWJhc2UucXVlcnkoXG4gICAgICAgICAgICAgICAgKCk9PiB7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYWZlTmFtZSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNpbmdsZUV2ZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBvcmRlckJ5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBmaXJlYmFzZS5RdWVyeU9yZGVyQnlUeXBlLktFWVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKS50aGVuKFxuICAgICAgICAgICAgICAgIChyZXM9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJzb21ldGhpbmcgc2hvdWxkIGNvbWUgaGVyZVwiLCBKU09OLnN0cmluZ2lmeShyZXMudmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSByZXMudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYi5tZW51KSk7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYi5tZW51Lm1lbnVJdGVtMS5uYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vdmFyIGMgPSBKU09OLnN0cmluZ2lmeShiLm1lbnUpO1xuICAgICAgICAgICAgICAgICAgICAvL3ZhciBkID0gYi5tZW51O1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwibGVuZ3RoIGlzIFwiICsgcmVzLnZhbHVlLm1lbnUuZ2V0Q2hpbGRyZW5Db3VudCgpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKHJlcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICkuY2F0Y2goKHJlcz0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInlhaGFuIGt1Y2ggcGFuZ2EgaGFpLi4uXCIsIHJlcylcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImxlbmd0aCBpcyBhbmQgcGF0aCBpcyBcIiArIHRoaXMuaXRlbXMubGVuZ3RoICsgXCIgXCIgKyB0aGlzLml0ZW1zW2NvdW50ZXJdLnBhdGgpO1xuICAgICAgICAgICAgY2FmZU5hbWUgPSBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXM7XG4gICAgfVxuXG4gICAgZ2V0SXRlbShpZDogbnVtYmVyKTogSXRlbSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiaXRlbXMgZ290dGVuIGJhY2sgXCIgKyBpZCk7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0uaWQgPT09IGlkKVswXTtcbiAgICB9XG59XG4iXX0=
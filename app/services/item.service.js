"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var firebase = require("nativescript-plugin-firebase");
var ItemService = /** @class */ (function () {
    function ItemService() {
        this.businessName = "";
        this.items = new Array();
    }
    ItemService.prototype.getItems = function () {
        var _this = this;
        var base = "/businessName/cafe";
        var cafeName = "";
        var counter = 0;
        for (counter = 0; counter < 6; counter++) {
            var count = (counter + 1).toString();
            var cafeName = cafeName.concat(base, count);
            console.log(cafeName);
            var a = firebase.query(function () {
            }, cafeName, {
                singleEvent: true,
                orderBy: {
                    type: firebase.QueryOrderByType.KEY
                }
            }).then((function (res) {
                //console.log("something should come here", JSON.stringify(res.value));
                var b = res.value;
                //console.log(JSON.stringify(b.menu));
                //console.log(JSON.stringify(b.menu.menuItem1.name));
                //var c = JSON.stringify(b.menu);
                //var d = b.menu;
                //console.log("length is " + res.value.menu.getChildrenCount());
                _this.items.push(res.value);
            })).catch((function (res) {
                console.log("yahan kuch panga hai...", res);
            }));
            //console.log("length is and path is " + this.items.length + " " + this.items[counter].path);
            cafeName = "";
        }
        return this.items;
    };
    ItemService.prototype.getItem = function (id) {
        return this.items.filter(function (item) { return item.id === id; })[0];
    };
    ItemService = __decorate([
        core_1.Injectable()
    ], ItemService);
    return ItemService;
}());
exports.ItemService = ItemService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXRlbS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBRTNDLHVEQUEwRDtBQUkxRDtJQURBO1FBR1ksaUJBQVksR0FBRyxFQUFFLENBQUM7UUFFbEIsVUFBSyxHQUFHLElBQUksS0FBSyxFQUt4QixDQUFDO0lBK0NOLENBQUM7SUE3Q0csOEJBQVEsR0FBUjtRQUFBLGlCQXdDQztRQXZDRyxJQUFJLElBQUksR0FBRyxvQkFBb0IsQ0FBQztRQUNoQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBRWhCLEdBQUcsQ0FBQSxDQUFDLE9BQU8sR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDO1lBRXRDLElBQUksS0FBSyxHQUFHLENBQUMsT0FBTyxHQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ25DLElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFdEIsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FDbEI7WUFDQSxDQUFDLEVBQ0QsUUFBUSxFQUNSO2dCQUNJLFdBQVcsRUFBRSxJQUFJO2dCQUNqQixPQUFPLEVBQUU7b0JBQ0wsSUFBSSxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHO2lCQUN0QzthQUNKLENBQ0osQ0FBQyxJQUFJLENBQ0YsQ0FBQyxVQUFBLEdBQUc7Z0JBQ0EsdUVBQXVFO2dCQUN2RSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO2dCQUNsQixzQ0FBc0M7Z0JBQ3RDLHFEQUFxRDtnQkFDckQsaUNBQWlDO2dCQUNqQyxpQkFBaUI7Z0JBQ2pCLGdFQUFnRTtnQkFDaEUsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9CLENBQUMsQ0FBQyxDQUNMLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBQSxHQUFHO2dCQUNSLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLEVBQUUsR0FBRyxDQUFDLENBQUE7WUFDL0MsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNILDZGQUE2RjtZQUM3RixRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQsNkJBQU8sR0FBUCxVQUFRLEVBQVU7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBZCxDQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBdkRRLFdBQVc7UUFEdkIsaUJBQVUsRUFBRTtPQUNBLFdBQVcsQ0F3RHZCO0lBQUQsa0JBQUM7Q0FBQSxBQXhERCxJQXdEQztBQXhEWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSXRlbSB9IGZyb20gXCIuLi9kYXRhdHlwZXMvaXRlbVwiO1xuaW1wb3J0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEl0ZW1TZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgYnVzaW5lc3NOYW1lID0gXCJcIjtcblxuICAgIHByaXZhdGUgaXRlbXMgPSBuZXcgQXJyYXk8SXRlbT4oXG4gICAgICAgIC8veyBpZDogMSwgbmFtZTogXCJNYXNhbGEgQ3VycnkgQ2FmZVwiLCBjYXRlZ29yeTogXCJJbmRpYW5cIiwgaW1nU3JjOiBcImh0dHBzOi8vY2RuNS5ub3JlY2lwZXMuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE3LzA1LzA1MDIxNzQ3L2NoaWNrZW4tYmlyeWFuaS0xMS5qcGdcIiwgbWVudTogXCJ7bWVudUl0ZW0xOntuYW1lOkNoaWNrZW4gQmlyeWFuaSwgcHJpY2U6IDkuOTV9LCB7bWVudUl0ZW0yOntuYW1lOlZlZyBCaXJ5YW5pLCBwcmljZTogOC45NX19XCJ9LFxuICAgICAgICAvL3sgaWQ6IDEsIG5hbWU6IFwiTWFzYWxhIEN1cnJ5IENhZmUgMlwiLCBjYXRlZ29yeTogXCJJbmRpYW5cIiwgaW1nU3JjOiBcImh0dHBzOi8vY2RuNS5ub3JlY2lwZXMuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE3LzA1LzA1MDIxNzQ3L2NoaWNrZW4tYmlyeWFuaS0xMS5qcGdcIiwgbWVudTogXCJ7bWVudUl0ZW0xOntuYW1lOkNoaWNrZW4gQmlyeWFuaSwgcHJpY2U6IDkuOTV9LCB7bWVudUl0ZW0yOntuYW1lOlZlZyBCaXJ5YW5pLCBwcmljZTogOC45NX19XCJ9XG4gICAgICAgIC8veyBpZDogMiwgbmFtZTogXCJNYXN0IEphcGFuaSBDYWZlXCIsIGNhdGVnb3J5OiBcIkphcGFuaSBDYWZlXCIgfSxcbiAgICAgICAgLy97IGlkOiAzLCBuYW1lOiBcIk55YWxhXCIsIGNhdGVnb3J5OiBcIkV0aGlvcGlhbiBDYWZlXCIgfSxcbiAgICApO1xuXG4gICAgZ2V0SXRlbXMoKTogSXRlbVtdIHtcbiAgICAgICAgdmFyIGJhc2UgPSBcIi9idXNpbmVzc05hbWUvY2FmZVwiO1xuICAgICAgICB2YXIgY2FmZU5hbWUgPSBcIlwiO1xuICAgICAgICB2YXIgY291bnRlciA9IDA7XG5cbiAgICAgICAgZm9yKGNvdW50ZXIgPSAwOyBjb3VudGVyIDwgNjsgY291bnRlcisrKSB7XG5cbiAgICAgICAgICAgIHZhciBjb3VudCA9IChjb3VudGVyKzEpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB2YXIgY2FmZU5hbWUgPSBjYWZlTmFtZS5jb25jYXQoYmFzZSwgY291bnQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coY2FmZU5hbWUpO1xuXG4gICAgICAgICAgICB2YXIgYSA9IGZpcmViYXNlLnF1ZXJ5KFxuICAgICAgICAgICAgICAgICgpPT4ge1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FmZU5hbWUsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzaW5nbGVFdmVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgb3JkZXJCeToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZmlyZWJhc2UuUXVlcnlPcmRlckJ5VHlwZS5LRVlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICkudGhlbihcbiAgICAgICAgICAgICAgICAocmVzPT4ge1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwic29tZXRoaW5nIHNob3VsZCBjb21lIGhlcmVcIiwgSlNPTi5zdHJpbmdpZnkocmVzLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiID0gcmVzLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGIubWVudSkpO1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGIubWVudS5tZW51SXRlbTEubmFtZSkpO1xuICAgICAgICAgICAgICAgICAgICAvL3ZhciBjID0gSlNPTi5zdHJpbmdpZnkoYi5tZW51KTtcbiAgICAgICAgICAgICAgICAgICAgLy92YXIgZCA9IGIubWVudTtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImxlbmd0aCBpcyBcIiArIHJlcy52YWx1ZS5tZW51LmdldENoaWxkcmVuQ291bnQoKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChyZXMudmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApLmNhdGNoKChyZXM9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ5YWhhbiBrdWNoIHBhbmdhIGhhaS4uLlwiLCByZXMpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJsZW5ndGggaXMgYW5kIHBhdGggaXMgXCIgKyB0aGlzLml0ZW1zLmxlbmd0aCArIFwiIFwiICsgdGhpcy5pdGVtc1tjb3VudGVyXS5wYXRoKTtcbiAgICAgICAgICAgIGNhZmVOYW1lID0gXCJcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zO1xuICAgIH1cblxuICAgIGdldEl0ZW0oaWQ6IG51bWJlcik6IEl0ZW0ge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLmlkID09PSBpZClbMF07XG4gICAgfVxufVxuIl19